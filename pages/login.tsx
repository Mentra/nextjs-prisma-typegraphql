import { FormEvent, useCallback, useState } from "react";
import { gql, useMutation } from "@apollo/client";
import Head from "next/head";
import type { NextPage } from "next";
import router from "next/router";
import styles from "../styles/Home.module.css";
import { User } from "prisma/typegraphql/generated/models/User";

const LOGIN_MUTATION = gql`
  mutation login($email: String!, $password: String!) {
    login(email: $email, password: $password) {
      __typename
      id
      name
    }
  }
`;

interface FormState {
  password: string;
  email: string;
}

const Login: NextPage = () => {
  const [formState, setFormState] = useState<FormState>({
    email: "",
    password: ""
  });
  const [login, { loading }] = useMutation<{ login: User }, FormState>(
    LOGIN_MUTATION
  );
  const handleSubmit = useCallback(
    async (event: FormEvent) => {
      event.preventDefault();
      const returnUser = await login({ variables: formState });
      if (returnUser) {
        await router.push("/user");
      }
    },
    [formState, login]
  );
  return (
    <div className={styles.container}>
      <Head>
        <title>Next.js Prisma TypeGraphQL Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Login</h1>
        <form>
          <div>
            <label htmlFor="email">Email</label>
            <input
              id="email"
              onChange={(event) =>
                setFormState((oldState) => ({
                  ...oldState,
                  email: event.target.value
                }))
              }
              type="text"
              value={formState.email}
            />
          </div>
          <div>
            <label htmlFor="password">Password</label>
            <input
              id="password"
              onChange={(event) =>
                setFormState((oldState) => ({
                  ...oldState,
                  password: event.target.value
                }))
              }
              type="password"
              value={formState.password}
            />
          </div>
          <button disabled={loading} onClick={handleSubmit} type="submit">
            {loading ? "Logging in..." : "Log In"}
          </button>
        </form>
      </main>
    </div>
  );
};

export default Login;
